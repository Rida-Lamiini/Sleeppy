export declare enum Scopes {
    email = "email",
    profile = "profile",
    openid = "openid",
    offline_access = "offline"
}
export declare enum PromptTypes {
    none = "none",
    create = "create",
    login = "login"
}
export type LoginMethodParams = Pick<LoginOptions, "audience" | "scope" | "isCreateOrg" | "prompt" | "lang" | "loginHint" | "orgCode" | "orgName" | "connectionId" | "redirectURL" | "hasSuccessPage" | "workflowDeploymentId">;
export type LoginOptions = {
    /** Audience to include in the token */
    audience?: string;
    /** Client ID of the application
     *
     * This can be found in the application settings in the Kinde dashboard
     */
    clientId: string;
    /**
     * Code challenge for PKCE
     */
    codeChallenge?: string;
    /**
     * Code challenge method for PKCE
     */
    codeChallengeMethod?: string;
    /**
     * Connection ID to use for the login
     *
     * This is found in the authentication settings in the Kinde dashboard
     */
    connectionId?: string;
    /**
     * Whether the user is creating an organization on registration
     */
    isCreateOrg?: boolean;
    /**
     * Language to use for the login in 2 letter ISO format
     */
    lang?: string;
    /**
     * Login hint to use for the login
     *
     * This can be in one of the following formats:
     * - joe@blogs.com
     * - phone:+447700900000:gb
     * - username:joebloggs
     */
    loginHint?: string;
    /**
     * Organization code to use for the login
     */
    orgCode?: string;
    /**
     * Organization name to be used when creating an organization at registration
     */
    orgName?: string;
    /**
     * Prompt to use for the login
     *
     * This can be one of the following:
     * - login (force user re-authentication)
     * - create (show registration screen)
     * - none (silently authenticate user without prompting for action)
     *
     */
    prompt?: PromptTypes;
    /**
     * Redirect URL to use for the login
     */
    redirectURL: string;
    /**
     * Response type to use for the login
     *
     * Kinde currently only supports `code`
     */
    responseType?: string;
    /**
     * Scopes to include in the token
     *
     * This can be one or more of the following:
     * - email
     * - profile
     * - openid
     * - offline
     */
    scope?: Scopes[];
    /**
     * State to use for the login
     */
    state?: string;
    /**
     * Whether to show the success screen at the end of the flow, this is most useful when the callback is not a webpage.
     */
    hasSuccessPage?: boolean;
    /**
     * Single use code to prevent replay attacks
     */
    nonce?: string;
    /**
     * Workflow Deployment ID to trigger on authentication
     */
    workflowDeploymentId?: string;
};
export declare enum IssuerRouteTypes {
    logout = "logout",
    login = "login",
    register = "registration",
    token = "token",
    profile = "profile"
}
export type PKCEChallenge = {
    codeVerifier: string;
    codeChallenge: string;
};
export type PKCEChallengeState = PKCEChallenge & {
    state: string;
};
